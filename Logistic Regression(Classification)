Logistic Regression/Classification Analysis Using R
Classification of existing customers into good_bad and Prediction for new customer loan application
Score card for Bank Loan approval
Asutosh Dash

October 24, 2015

===================================================================

IMPORTING DATA SET
===================================================================

#Setting Directory path
setwd(choose.dir())
getwd()
## [1] "G:/HardDisk/analytics/class 11/Logistic Regression/New folder"
#Reading the File
loan_data <- read.csv(choose.files(), header = TRUE)
===================================================================

UNDERSTANDING DATA SET
===================================================================

str(loan_data)
## 'data.frame':    850 obs. of  9 variables:
##  $ age     : int  41 27 40 41 24 41 39 43 24 36 ...
##  $ ed      : int  3 1 1 1 2 2 1 1 1 1 ...
##  $ employ  : int  17 10 15 15 2 5 20 12 3 0 ...
##  $ address : int  12 6 14 14 0 5 9 11 4 13 ...
##  $ income  : int  176 31 55 120 28 25 67 38 19 25 ...
##  $ debtinc : num  9.3 17.3 5.5 2.9 17.3 10.2 30.6 3.6 24.4 19.7 ...
##  $ creddebt: num  11.359 1.362 0.856 2.659 1.787 ...
##  $ othdebt : num  5.009 4.001 2.169 0.821 3.057 ...
##  $ default : int  1 0 0 0 1 0 0 0 1 0 ...
typeof(loan_data)
## [1] "list"
nrow(loan_data)
## [1] 850
ncol(loan_data)
## [1] 9
dim(loan_data)
## [1] 850   9
names(loan_data)
## [1] "age"      "ed"       "employ"   "address"  "income"   "debtinc" 
## [7] "creddebt" "othdebt"  "default"
#using describe{psych}
#install.packages("psych")
require(psych)
## Loading required package: psych
t(describe(loan_data))
##                  age           ed      employ     address     income
## vars       1.0000000   2.00000000   3.0000000   4.0000000   5.000000
## n        850.0000000 850.00000000 850.0000000 850.0000000 850.000000
## mean      35.0294118   1.71058824   8.5658824   8.3717647  46.675294
## sd         8.0414316   0.92778388   6.7778836   6.8950164  38.543054
## median    34.0000000   1.00000000   7.0000000   7.0000000  35.000000
## trimmed   34.6882353   1.55147059   7.8897059   7.5602941  39.425000
## mad        8.8956000   0.00000000   7.4130000   7.4130000  19.273800
## min       20.0000000   1.00000000   0.0000000   0.0000000  13.000000
## max       56.0000000   5.00000000  33.0000000  34.0000000 446.000000
## range     36.0000000   4.00000000  33.0000000  34.0000000 433.000000
## skew       0.3338550   1.21255438   0.8596206   0.9205327   3.687710
## kurtosis  -0.6662399   0.69899168   0.3619988   0.2406023  22.287056
## se         0.2758188   0.03182272   0.2324795   0.2364971   1.322016
##              debtinc     creddebt    othdebt      default
## vars       6.0000000   7.00000000   8.000000   9.00000000
## n        850.0000000 850.00000000 850.000000 700.00000000
## mean      10.1716471   1.57680473   3.078789   0.26142857
## sd         6.7194413   2.12584001   3.398803   0.43972708
## median     8.7000000   0.88509150   2.003243   0.00000000
## trimmed    9.4091176   1.13772840   2.420174   0.20178571
## mad        6.2269200   0.89950899   1.679052   0.00000000
## min        0.1000000   0.01169600   0.045584   0.00000000
## max       41.3000000  20.56131000  35.197500   1.00000000
## range     41.2000000  20.54961400  35.151916   1.00000000
## skew       1.1210315   3.68884453   3.194716   1.08353852
## kurtosis   1.3622117  19.32595192  16.484615  -0.82711976
## se         0.2304749   0.07291571   0.116578   0.01662012



describeData(loan_data)
## n.obs =  850 of which  700   are complete cases.   Number of variables =  9  of which all are numeric  TRUE  
##          variable # n.obs type         H1        H2        H3        H4
## age               1   850    1  41.000000 27.000000 40.000000  41.00000
## ed                2   850    1   3.000000  1.000000  1.000000   1.00000
## employ            3   850    1  17.000000 10.000000 15.000000  15.00000
## address           4   850    1  12.000000  6.000000 14.000000  14.00000
## income            5   850    1 176.000000 31.000000 55.000000 120.00000
## debtinc           6   850    1   9.300000 17.300000  5.500000   2.90000
## creddebt          7   850    1  11.359392  1.362202  0.856075   2.65872
## othdebt           8   850    1   5.008608  4.000798  2.168925   0.82128
## default           9   700    1   1.000000  0.000000  0.000000   0.00000
##                  T1        T2        T3       T4
## age       32.000000 48.000000 35.000000 37.00000
## ed         2.000000  1.000000  2.000000  1.00000
## employ    12.000000 13.000000  1.000000 20.00000
## address   11.000000 11.000000 11.000000 13.00000
## income   116.000000 38.000000 24.000000 41.00000
## debtinc    5.700000 10.800000  7.800000 12.90000
## creddebt   4.026708  0.722304  0.417456  0.89913
## othdebt    2.585292  3.381696  1.454544  4.38987
## default          NA        NA        NA       NA




#if duplicates exist in data set
sum(duplicated(loan_data))
## [1] 0



head(loan_data)
##   age ed employ address income debtinc  creddebt  othdebt default
## 1  41  3     17      12    176     9.3 11.359392 5.008608       1
## 2  27  1     10       6     31    17.3  1.362202 4.000798       0
## 3  40  1     15      14     55     5.5  0.856075 2.168925       0
## 4  41  1     15      14    120     2.9  2.658720 0.821280       0
## 5  24  2      2       0     28    17.3  1.787436 3.056564       1
## 6  41  2      5       5     25    10.2  0.392700 2.157300       0



tail(loan_data)
##     age ed employ address income debtinc creddebt  othdebt default
## 845  23  1      3       4     13     3.1 0.045539 0.357461      NA
## 846  34  1     12      15     32     2.7 0.239328 0.624672      NA
## 847  32  2     12      11    116     5.7 4.026708 2.585292      NA
## 848  48  1     13      11     38    10.8 0.722304 3.381696      NA
## 849  35  2      1      11     24     7.8 0.417456 1.454544      NA
## 850  37  1     20      13     41    12.9 0.899130 4.389870      NA

head(loan_data, -840)#extract first 10 using head
##    age ed employ address income debtinc  creddebt   othdebt default
## 1   41  3     17      12    176     9.3 11.359392  5.008608       1
## 2   27  1     10       6     31    17.3  1.362202  4.000798       0
## 3   40  1     15      14     55     5.5  0.856075  2.168925       0
## 4   41  1     15      14    120     2.9  2.658720  0.821280       0
## 5   24  2      2       0     28    17.3  1.787436  3.056564       1
## 6   41  2      5       5     25    10.2  0.392700  2.157300       0
## 7   39  1     20       9     67    30.6  3.833874 16.668126       0
## 8   43  1     12      11     38     3.6  0.128592  1.239408       0
## 9   24  1      3       4     19    24.4  1.358348  3.277652       1
## 10  36  1      0      13     25    19.7  2.777700  2.147300       0

tail(loan_data, -840)
##     age ed employ address income debtinc creddebt   othdebt default
## 841  35  2     11       1     62    32.4 9.702504 10.385496      NA
## 842  35  4     10      12     45     8.5 1.040400  2.784600      NA
## 843  51  4     15      30     26    13.6 2.011984  1.524016      NA
## 844  36  1      5       2     27     7.0 0.723870  1.166130      NA
## 845  23  1      3       4     13     3.1 0.045539  0.357461      NA
## 846  34  1     12      15     32     2.7 0.239328  0.624672      NA
## 847  32  2     12      11    116     5.7 4.026708  2.585292      NA
## 848  48  1     13      11     38    10.8 0.722304  3.381696      NA
## 849  35  2      1      11     24     7.8 0.417456  1.454544      NA
## 850  37  1     20      13     41    12.9 0.899130  4.389870      NA



#checking correlation between variables
round(cor(loan_data), 2)
##           age    ed employ address income debtinc creddebt othdebt default
## age      1.00  0.01   0.55    0.60   0.48    0.01     0.28    0.34      NA
## ed       0.01  1.00  -0.15    0.05   0.22    0.01     0.10    0.14      NA
## employ   0.55 -0.15   1.00    0.34   0.63   -0.03     0.38    0.41      NA
## address  0.60  0.05   0.34    1.00   0.31   -0.03     0.16    0.19      NA
## income   0.48  0.22   0.63    0.31   1.00   -0.04     0.55    0.60      NA
## debtinc  0.01  0.01  -0.03   -0.03  -0.04    1.00     0.51    0.57      NA
## creddebt 0.28  0.10   0.38    0.16   0.55    0.51     1.00    0.64      NA
## othdebt  0.34  0.14   0.41    0.19   0.60    0.57     0.64    1.00      NA
## default    NA    NA     NA      NA     NA      NA       NA      NA       1
#scatter matrix
pairs.panels(loan_data)


#class of variables

sapply(loan_data, class)
##       age        ed    employ   address    income   debtinc  creddebt 
## "integer" "integer" "integer" "integer" "integer" "numeric" "numeric" 
##   othdebt   default 
## "numeric" "integer"
#type of variables

sapply(loan_data, typeof)
##       age        ed    employ   address    income   debtinc  creddebt 
## "integer" "integer" "integer" "integer" "integer"  "double"  "double" 
##   othdebt   default 
##  "double" "integer"


#No of Unique observations
apply(loan_data , 2, function(x){(length(unique(loan_data)))})
##      age       ed   employ  address   income  debtinc creddebt  othdebt 
##        9        9        9        9        9        9        9        9 
##  default 
##        9
#apply(loan_data, 2, function(x){((length(unique(loan_data))))})

#More checks on Data set
fac <- apply(loan_data, 2, function(x){is.factor(x)})
fac
##      age       ed   employ  address   income  debtinc creddebt  othdebt 
##    FALSE    FALSE    FALSE    FALSE    FALSE    FALSE    FALSE    FALSE 
##  default 
##    FALSE


fac1 <- !apply(loan_data, 2, function(x){is.numeric(x)})
fac1
##      age       ed   employ  address   income  debtinc creddebt  othdebt 
##    FALSE    FALSE    FALSE    FALSE    FALSE    FALSE    FALSE    FALSE 
##  default 
##    FALSE


#More description of data
fac2 <-sapply(loan_data, function(x)(describe(x)))
fac2
##          age        ed         employ    address   income   debtinc  
## vars     1          1          1         1         1        1        
## n        850        850        850       850       850      850      
## mean     35.02941   1.710588   8.565882  8.371765  46.67529 10.17165 
## sd       8.041432   0.9277839  6.777884  6.895016  38.54305 6.719441 
## median   34         1          7         7         35       8.7      
## trimmed  34.68824   1.551471   7.889706  7.560294  39.425   9.409118 
## mad      8.8956     0          7.413     7.413     19.2738  6.22692  
## min      20         1          0         0         13       0.1      
## max      56         5          33        34        446      41.3     
## range    36         4          33        34        433      41.2     
## skew     0.333855   1.212554   0.8596206 0.9205327 3.68771  1.121031 
## kurtosis -0.6662399 0.6989917  0.3619988 0.2406023 22.28706 1.362212 
## se       0.2758188  0.03182272 0.2324795 0.2364971 1.322016 0.2304749
##          creddebt   othdebt  default   
## vars     1          1        1         
## n        850        850      700       
## mean     1.576805   3.078789 0.2614286 
## sd       2.12584    3.398803 0.4397271 
## median   0.8850915  2.003243 0         
## trimmed  1.137728   2.420174 0.2017857 
## mad      0.899509   1.679052 0         
## min      0.011696   0.045584 0         
## max      20.56131   35.1975  1         
## range    20.54961   35.15192 1         
## skew     3.688845   3.194716 1.083539  
## kurtosis 19.32595   16.48462 -0.8271198
## se       0.07291571 0.116578 0.01662012


fac3 <- sapply(loan_data, function(x){describe(x)})
View(fac3)
fac4 <- sapply(loan_data ,function(x)(summary(x)))
fac4
## $age
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   20.00   29.00   34.00   35.03   41.00   56.00 
## 
## $ed
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   1.000   1.000   1.000   1.711   2.000   5.000 
## 
## $employ
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   0.000   3.000   7.000   8.566  13.000  33.000 
## 
## $address
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   0.000   3.000   7.000   8.372  12.000  34.000 
## 
## $income
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##   13.00   24.00   35.00   46.68   55.75  446.00 
## 
## $debtinc
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##    0.10    5.10    8.70   10.17   13.80   41.30 
## 
## $creddebt
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##  0.0117  0.3822  0.8851  1.5770  1.8980 20.5600 
## 
## $othdebt
##     Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
##  0.04558  1.04600  2.00300  3.07900  3.90300 35.20000 
## 
## $default
##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
##  0.0000  0.0000  0.0000  0.2614  1.0000  1.0000     150
#apply(loan_data, 2, function(x){summary(x)})

#getting maximum and checking for outliers
fac5 <- sapply(loan_data ,function(x)(which.max(x)))
fac6 <- apply(loan_data, 2,  function(x){sum(x>max(x))})
fac6
##      age       ed   employ  address   income  debtinc creddebt  othdebt 
##        0        0        0        0        0        0        0        0 
##  default 
##       NA
fac7 <- apply(loan_data, 2 ,function(x){(which.min(x))})
fac7
##      age       ed   employ  address   income  debtinc creddebt  othdebt 
##      427        2       10        5      845      787      572      437 
##  default 
##        2
fac8 <- apply(loan_data, 2, function(x){sum(x<min(x))})
fac8
##      age       ed   employ  address   income  debtinc creddebt  othdebt 
##        0        0        0        0        0        0        0        0 
##  default 
##       NA
#fac9 <- cbind(fac6, fac8)
#fac9


# Tukey min,lower-hinge, median,upper-hinge,max
fivenum(loan_data)
## [1]   0.000000   1.000000   4.296068  19.000000 446.000000
sapply(loan_data , function(x)(boxplot(loan_data)))
##       age         ed          employ      address     income     
## stats Numeric,45  Numeric,45  Numeric,45  Numeric,45  Numeric,45 
## n     Numeric,9   Numeric,9   Numeric,9   Numeric,9   Numeric,9  
## conf  Numeric,18  Numeric,18  Numeric,18  Numeric,18  Numeric,18 
## out   Numeric,285 Numeric,285 Numeric,285 Numeric,285 Numeric,285
## group Numeric,285 Numeric,285 Numeric,285 Numeric,285 Numeric,285
## names Character,9 Character,9 Character,9 Character,9 Character,9
##       debtinc     creddebt    othdebt     default    
## stats Numeric,45  Numeric,45  Numeric,45  Numeric,45 
## n     Numeric,9   Numeric,9   Numeric,9   Numeric,9  
## conf  Numeric,18  Numeric,18  Numeric,18  Numeric,18 
## out   Numeric,285 Numeric,285 Numeric,285 Numeric,285
## group Numeric,285 Numeric,285 Numeric,285 Numeric,285
## names Character,9 Character,9 Character,9 Character,9
#dat <- boxplot(loan_data)$out
#dat

#boxdata <- with(loan_data, boxplot(default~age+ed+employ+address+income+debtinc+creddebt+othdebt,range=4))

tmp <- do.call(data.frame,
               list(n=apply(loan_data, 2, length),
                    #nmiss=apply(loan_data, 2, is.na),
                    mean=apply(loan_data, 2, mean),
                    sd=apply(loan_data, 2, sd),
                    var=apply(loan_data, 2, var),
                    median=apply(loan_data, 2, median),
                    min=apply(loan_data, 2, min),
                    max=apply(loan_data, 2, max),
                    p1=apply(loan_data, 2, function(x){quantile(x, 0.01,na.rm = T)}),
                    p99=apply(loan_data, 2, function(x){quantile(x,0.99,na.rm = T)})))
t(tmp)
##               age          ed     employ    address     income    debtinc
## n      850.000000 850.0000000 850.000000 850.000000  850.00000 850.000000
## mean    35.029412   1.7105882   8.565882   8.371765   46.67529  10.171647
## sd       8.041432   0.9277839   6.777884   6.895016   38.54305   6.719441
## var     64.664623   0.8607829  45.939706  47.541251 1485.56700  45.150891
## median  34.000000   1.0000000   7.000000   7.000000   35.00000   8.700000
## min     20.000000   1.0000000   0.000000   0.000000   13.00000   0.100000
## max     56.000000   5.0000000  33.000000  34.000000  446.00000  41.300000
## p1      21.000000   1.0000000   0.000000   0.000000   14.49000   0.900000
## p99     53.000000   4.0000000  29.000000  26.510000  220.51000  31.565000
##           creddebt     othdebt default
## n      850.0000000 850.0000000     850
## mean     1.5768047   3.0787894      NA
## sd       2.1258400   3.3988033      NA
## var      4.5191958  11.5518637      NA
## median   0.8850915   2.0032430      NA
## min      0.0116960   0.0455840      NA
## max     20.5613100  35.1975000      NA
## p1       0.0303492   0.1623942       0
## p99     10.2859974  16.9315033       1
#using lapply and rbind
tmp1 <- lapply(loan_data, function(x)
  rbind(mean=mean(x),
        sd=sd(x),
        median=median(x),
        minimum=min(x),
        maximim=max(x),
        size=length(x)))
data.frame(tmp1)
##                age          ed     employ    address    income    debtinc
## mean     35.029412   1.7105882   8.565882   8.371765  46.67529  10.171647
## sd        8.041432   0.9277839   6.777884   6.895016  38.54305   6.719441
## median   34.000000   1.0000000   7.000000   7.000000  35.00000   8.700000
## minimum  20.000000   1.0000000   0.000000   0.000000  13.00000   0.100000
## maximim  56.000000   5.0000000  33.000000  34.000000 446.00000  41.300000
## size    850.000000 850.0000000 850.000000 850.000000 850.00000 850.000000
##            creddebt    othdebt default
## mean      1.5768047   3.078789      NA
## sd        2.1258400   3.398803      NA
## median    0.8850915   2.003243      NA
## minimum   0.0116960   0.045584      NA
## maximim  20.5613100  35.197500      NA
## size    850.0000000 850.000000     850



#Using basicStats{fBasics}
#install.packages("fBasics")
require(fBasics)
## Loading required package: fBasics
## Loading required package: timeDate
## Loading required package: timeSeries
## 
## Attaching package: 'timeSeries'
## 
## The following object is masked from 'package:psych':
## 
##     outlier
## 
## 
## 
## Rmetrics Package fBasics
## Analysing Markets and calculating Basic Statistics
## Copyright (C) 2005-2014 Rmetrics Association Zurich
## Educational Software for Financial Engineering and Computational Science
## Rmetrics is free software and comes with ABSOLUTELY NO WARRANTY.
## https://www.rmetrics.org --- Mail to: info@rmetrics.org
## 
## Attaching package: 'fBasics'
## 
## The following object is masked from 'package:psych':
## 
##     tr
basicStats(loan_data)
##                      age          ed      employ     address       income
## nobs          850.000000  850.000000  850.000000  850.000000   850.000000
## NAs             0.000000    0.000000    0.000000    0.000000     0.000000
## Minimum        20.000000    1.000000    0.000000    0.000000    13.000000
## Maximum        56.000000    5.000000   33.000000   34.000000   446.000000
## 1. Quartile    29.000000    1.000000    3.000000    3.000000    24.000000
## 3. Quartile    41.000000    2.000000   13.000000   12.000000    55.750000
## Mean           35.029412    1.710588    8.565882    8.371765    46.675294
## Median         34.000000    1.000000    7.000000    7.000000    35.000000
## Sum         29775.000000 1454.000000 7281.000000 7116.000000 39674.000000
## SE Mean         0.275819    0.031823    0.232479    0.236497     1.322016
## LCL Mean       34.488045    1.648128    8.109580    7.907577    44.080492
## UCL Mean       35.570779    1.773049    9.022184    8.835952    49.270097
## Variance       64.664623    0.860783   45.939706   47.541251  1485.566998
## Stdev           8.041432    0.927784    6.777884    6.895016    38.543054
## Skewness        0.333855    1.212554    0.859621    0.920533     3.687710
## Kurtosis       -0.666240    0.698992    0.361999    0.240602    22.287056
##                 debtinc    creddebt     othdebt    default
## nobs         850.000000  850.000000  850.000000 850.000000
## NAs            0.000000    0.000000    0.000000 150.000000
## Minimum        0.100000    0.011696    0.045584   0.000000
## Maximum       41.300000   20.561310   35.197500   1.000000
## 1. Quartile    5.100000    0.382176    1.045942   0.000000
## 3. Quartile   13.800000    1.898440    3.903001   1.000000
## Mean          10.171647    1.576805    3.078789   0.261429
## Median         8.700000    0.885091    2.003243   0.000000
## Sum         8645.900000 1340.284021 2616.970979 183.000000
## SE Mean        0.230475    0.072916    0.116578   0.016620
## LCL Mean       9.719280    1.433689    2.849975   0.228797
## UCL Mean      10.624015    1.719921    3.307604   0.294060
## Variance      45.150891    4.519196   11.551864   0.193360
## Stdev          6.719441    2.125840    3.398803   0.439727
## Skewness       1.121031    3.688845    3.194716   1.083539
## Kurtosis       1.362212   19.325952   16.484615  -0.827120



#Using Hmisc::::describe to get n, nmiss, unique, mean, 5, 10 ,25, 50, 75, 90, 95th percentiles 5 lowest and 5 highest score
#install.packages("Hmisc")
require(Hmisc)
## Loading required package: Hmisc
## Loading required package: grid
## Loading required package: lattice
## Loading required package: survival
## Loading required package: Formula
## Loading required package: ggplot2
## 
## Attaching package: 'ggplot2'
## 
## The following object is masked from 'package:psych':
## 
##     %+%
## 
## 
## Attaching package: 'Hmisc'
## 
## The following object is masked from 'package:psych':
## 
##     describe
## 
## The following objects are masked from 'package:base':
## 
##     format.pval, round.POSIXt, trunc.POSIXt, units


describe(loan_data)
## loan_data 
## 
##  9  Variables      850  Observations
## ---------------------------------------------------------------------------
## age 
##       n missing  unique    Info    Mean     .05     .10     .25     .50 
##     850       0      37       1   35.03      23      25      29      34 
##     .75     .90     .95 
##      41      47      49 
## 
## lowest : 20 21 22 23 24, highest: 52 53 54 55 56 
## ---------------------------------------------------------------------------
## ed 
##       n missing  unique    Info    Mean 
##     850       0       5    0.82   1.711 
## 
##             1   2   3  4 5
## Frequency 460 235 101 49 5
## %          54  28  12  6 1
## ---------------------------------------------------------------------------
## employ 
##       n missing  unique    Info    Mean     .05     .10     .25     .50 
##     850       0      33       1   8.566    0.00    1.00    3.00    7.00 
##     .75     .90     .95 
##   13.00   18.00   21.55 
## 
## lowest :  0  1  2  3  4, highest: 28 29 30 31 33 
## ---------------------------------------------------------------------------
## address 
##       n missing  unique    Info    Mean     .05     .10     .25     .50 
##     850       0      32       1   8.372    0.00    1.00    3.00    7.00 
##     .75     .90     .95 
##   12.00   19.00   22.55 
## 
## lowest :  0  1  2  3  4, highest: 27 29 30 31 34 
## ---------------------------------------------------------------------------
## income 
##       n missing  unique    Info    Mean     .05     .10     .25     .50 
##     850       0     129       1   46.68   17.00   19.00   24.00   35.00 
##     .75     .90     .95 
##   55.75   84.00  115.55 
## 
## lowest :  13  14  15  16  17, highest: 253 254 266 324 446 
## ---------------------------------------------------------------------------
## debtinc 
##       n missing  unique    Info    Mean     .05     .10     .25     .50 
##     850       0     245       1   10.17    1.90    2.90    5.10    8.70 
##     .75     .90     .95 
##   13.80   19.20   23.51 
## 
## lowest :  0.1  0.4  0.6  0.7  0.8, highest: 33.3 33.4 35.3 36.6 41.3 
## ---------------------------------------------------------------------------
## creddebt 
##       n missing  unique    Info    Mean     .05     .10     .25     .50 
##     850       0     842       1   1.577  0.1089  0.1783  0.3822  0.8851 
##     .75     .90     .95 
##  1.8984  3.7033  5.3487 
## 
## lowest :  0.01170  0.01483  0.02205  0.02453  0.02458
## highest: 14.59620 15.01668 15.79178 16.03147 20.56131 
## ---------------------------------------------------------------------------
## othdebt 
##       n missing  unique    Info    Mean     .05     .10     .25     .50 
##     850       0     848       1   3.079  0.3599  0.5521  1.0459  2.0032 
##     .75     .90     .95 
##  3.9030  7.1119  9.4811 
## 
## lowest :  0.04558  0.05295  0.08949  0.10093  0.10752
## highest: 18.26913 20.61587 23.10422 27.03360 35.19750 
## ---------------------------------------------------------------------------
## default 
##       n missing  unique    Info     Sum    Mean 
##     700     150       2    0.58     183  0.2614 
## ---------------------------------------------------------------------------




#Using pastecs package stat.desc
#install.packages("pastecs")
require(pastecs)
## Loading required package: pastecs
## Loading required package: boot
## 
## Attaching package: 'boot'
## 
## The following object is masked from 'package:survival':
## 
##     aml
## 
## The following object is masked from 'package:lattice':
## 
##     melanoma
## 
## The following object is masked from 'package:psych':
## 
##     logit
stat.desc(loan_data)#nvr.val,nbr.null,nbr.na,min,max,range,sum,median,mean,SE.mean,CI.mean,std.dev,coeff.var
##                       age           ed       employ      address
## nbr.val      8.500000e+02 8.500000e+02  850.0000000  850.0000000
## nbr.null     0.000000e+00 0.000000e+00   72.0000000   60.0000000
## nbr.na       0.000000e+00 0.000000e+00    0.0000000    0.0000000
## min          2.000000e+01 1.000000e+00    0.0000000    0.0000000
## max          5.600000e+01 5.000000e+00   33.0000000   34.0000000
## range        3.600000e+01 4.000000e+00   33.0000000   34.0000000
## sum          2.977500e+04 1.454000e+03 7281.0000000 7116.0000000
## median       3.400000e+01 1.000000e+00    7.0000000    7.0000000
## mean         3.502941e+01 1.710588e+00    8.5658824    8.3717647
## SE.mean      2.758188e-01 3.182272e-02    0.2324795    0.2364971
## CI.mean.0.95 5.413667e-01 6.246044e-02    0.4563019    0.4641876
## var          6.466462e+01 8.607829e-01   45.9397062   47.5412513
## std.dev      8.041432e+00 9.277839e-01    6.7778836    6.8950164
## coef.var     2.295623e-01 5.423771e-01    0.7912651    0.8236037
##                    income      debtinc     creddebt      othdebt
## nbr.val      8.500000e+02  850.0000000 8.500000e+02  850.0000000
## nbr.null     0.000000e+00    0.0000000 0.000000e+00    0.0000000
## nbr.na       0.000000e+00    0.0000000 0.000000e+00    0.0000000
## min          1.300000e+01    0.1000000 1.169600e-02    0.0455840
## max          4.460000e+02   41.3000000 2.056131e+01   35.1975000
## range        4.330000e+02   41.2000000 2.054961e+01   35.1519160
## sum          3.967400e+04 8645.9000000 1.340284e+03 2616.9709790
## median       3.500000e+01    8.7000000 8.850915e-01    2.0032430
## mean         4.667529e+01   10.1716471 1.576805e+00    3.0787894
## SE.mean      1.322016e+00    0.2304749 7.291571e-02    0.1165780
## CI.mean.0.95 2.594803e+00    0.4523675 1.431162e-01    0.2288149
## var          1.485567e+03   45.1508913 4.519196e+00   11.5518637
## std.dev      3.854305e+01    6.7194413 2.125840e+00    3.3988033
## coef.var     8.257699e-01    0.6606050 1.348195e+00    1.1039415
##                   default
## nbr.val      700.00000000
## nbr.null     517.00000000
## nbr.na       150.00000000
## min            0.00000000
## max            1.00000000
## range          1.00000000
## sum          183.00000000
## median         0.00000000
## mean           0.26142857
## SE.mean        0.01662012
## CI.mean.0.95   0.03263134
## var            0.19335990
## std.dev        0.43972708
## coef.var       1.68201614



#Boxplot stats
b <- sapply(loan_data, function(x){boxplot(x)})


apply(loan_data, 2, function(x)boxplot(x))


## $age
## $age$stats
##      [,1]
## [1,]   20
## [2,]   29
## [3,]   34
## [4,]   41
## [5,]   56
## 
## $age$n
## [1] 850
## 
## $age$conf
##          [,1]
## [1,] 33.34968
## [2,] 34.65032
## 
## $age$out
## numeric(0)
## 
## $age$group
## numeric(0)
## 
## $age$names
## [1] "1"
## 
## 
## $ed
## $ed$stats
##      [,1]
## [1,]    1
## [2,]    1
## [3,]    1
## [4,]    2
## [5,]    3
## 
## $ed$n
## [1] 850
## 
## $ed$conf
##           [,1]
## [1,] 0.9458064
## [2,] 1.0541936
## 
## $ed$out
##  [1] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 4 5 5 4 4 4 4 4 4 5 4 4 5 4 4 4
## [36] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
## 
## $ed$group
##  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
## [36] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
## 
## $ed$names
## [1] "1"
## 
## 
## $employ
## $employ$stats
##      [,1]
## [1,]    0
## [2,]    3
## [3,]    7
## [4,]   13
## [5,]   28
## 
## $employ$n
## [1] 850
## 
## $employ$conf
##          [,1]
## [1,] 6.458064
## [2,] 7.541936
## 
## $employ$out
##  [1] 29 31 30 31 30 31 30 33 33 29
## 
## $employ$group
##  [1] 1 1 1 1 1 1 1 1 1 1
## 
## $employ$names
## [1] "1"
## 
## 
## $address
## $address$stats
##      [,1]
## [1,]    0
## [2,]    3
## [3,]    7
## [4,]   12
## [5,]   25
## 
## $address$n
## [1] 850
## 
## $address$conf
##          [,1]
## [1,] 6.512258
## [2,] 7.487742
## 
## $address$out
##  [1] 26 27 27 26 29 26 26 26 31 26 34 27 31 26 27 26 26 26 30
## 
## $address$group
##  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
## 
## $address$names
## [1] "1"
## 
## 
## $income
## $income$stats
##      [,1]
## [1,]   13
## [2,]   24
## [3,]   35
## [4,]   56
## [5,]  102
## 
## $income$n
## [1] 850
## 
## $income$conf
##          [,1]
## [1,] 33.26581
## [2,] 36.73419
## 
## $income$out
##  [1] 176 120 113 121 135 116 116 145 113 118 144 105 120 159 129 120 220
## [18] 126 132 157 446 242 177 221 166 190 249 123 234 115 114 113 129 148
## [35] 186 136 113 253 150 107 108 139 324 169 126 254 266 140 126 138 110
## [52] 116 116
## 
## $income$group
##  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
## [36] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
## 
## $income$names
## [1] "1"
## 
## 
## $debtinc
## $debtinc$stats
##      [,1]
## [1,]  0.1
## [2,]  5.1
## [3,]  8.7
## [4,] 13.8
## [5,] 26.5
## 
## $debtinc$n
## [1] 850
## 
## $debtinc$conf
##          [,1]
## [1,] 8.228516
## [2,] 9.171484
## 
## $debtinc$out
##  [1] 30.6 27.7 35.3 27.1 41.3 30.8 29.7 30.1 28.9 33.3 28.5 27.7 36.6 33.4
## [15] 30.7 32.5 28.9 32.5 28.2 32.3 32.4
## 
## $debtinc$group
##  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
## 
## $debtinc$names
## [1] "1"
## 
## 
## $creddebt
## $creddebt$stats
##           [,1]
## [1,] 0.0116960
## [2,] 0.3816000
## [3,] 0.8850915
## [4,] 1.8988200
## [5,] 4.1600000
## 
## $creddebt$n
## [1] 850
## 
## $creddebt$conf
##          [,1]
## [1,] 0.802868
## [2,] 0.967315
## 
## $creddebt$out
##  [1] 11.359392  6.048900  7.758900  4.582400  9.876600  6.226794  4.637360
##  [8]  4.404816  9.600480  4.874716  4.373382 20.561310  9.593400  4.593402
## [15] 14.596200  5.001711  5.574294  8.166400  4.521696  6.565583  5.245296
## [22] 15.016680  6.113800  6.935916  5.439966  6.948680  7.817144  4.764760
## [29]  5.402000 16.031470  4.672800 15.791776  4.584030  6.111369  5.715360
## [36]  4.513860  4.272840  4.991010  5.549544  7.387380  5.090526  6.911520
## [43]  4.935645  5.283498  7.320000  4.960032  5.896743  6.588540  4.637556
## [50]  5.781564 14.231448  5.060000  4.334400  5.501188  9.308376  4.880700
## [57] 13.552500  5.250528  6.506240  7.053480  7.612542  7.001764 10.679340
## [64]  7.754240  4.212968  4.183900  5.821200  9.542358  9.702504
## 
## $creddebt$group
##  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
## [36] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
## 
## $creddebt$names
## [1] "1"
## 
## 
## $othdebt
## $othdebt$stats
##          [,1]
## [1,] 0.045584
## [2,] 1.045296
## [3,] 2.003243
## [4,] 3.915681
## [5,] 8.217600
## 
## $othdebt$n
## [1] 850
## 
## $othdebt$conf
##          [,1]
## [1,] 1.847687
## [2,] 2.158799
## 
## $othdebt$out
##  [1] 16.668126  9.736768  9.716100  8.399496  8.502006 13.051206 12.421860
##  [8] 14.452730 10.183560 10.753960 12.659328  8.362380 12.075690  9.498822
## [15] 17.203800 12.714006 27.033600  9.043830 14.719320  9.286200 15.405390
## [22]  9.390654 11.874450  8.631320  9.250856  9.198000 11.042325 12.958530
## [29]  9.555345 23.104224  9.974640 18.269130 20.615868  9.704240 11.663340
## [36] 15.149160 10.811388 18.257382 17.798990 10.630620 11.893518 10.980000
## [43]  8.600436 17.184552  9.591294  9.459450 11.723976  8.907624 35.197500
## [50]  9.008766  9.018324 15.626520  9.727536  9.649458 12.556236  9.060660
## [57]  8.386560 15.276100 10.385496
## 
## $othdebt$group
##  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
## [36] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
## 
## $othdebt$names
## [1] "1"
## 
## 
## $default
## $default$stats
##      [,1]
## [1,]    0
## [2,]    0
## [3,]    0
## [4,]    1
## [5,]    1
## 
## $default$n
## [1] 700
## 
## $default$conf
##             [,1]
## [1,] -0.05971839
## [2,]  0.05971839
## 
## $default$out
## numeric(0)
## 
## $default$group
## numeric(0)
## 
## $default$names
## [1] "1"
mybox <-apply(loan_data ,2  ,function(x){(boxplot.stats(x))})
mybox
## $age
## $age$stats
## [1] 20 29 34 41 56
## 
## $age$n
## [1] 850
## 
## $age$conf
## [1] 33.34968 34.65032
## 
## $age$out
## numeric(0)
## 
## 
## $ed
## $ed$stats
## [1] 1 1 1 2 3
## 
## $ed$n
## [1] 850
## 
## $ed$conf
## [1] 0.9458064 1.0541936
## 
## $ed$out
##  [1] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 4 5 5 4 4 4 4 4 4 5 4 4 5 4 4 4
## [36] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
## 
## 
## $employ
## $employ$stats
## [1]  0  3  7 13 28
## 
## $employ$n
## [1] 850
## 
## $employ$conf
## [1] 6.458064 7.541936
## 
## $employ$out
##  [1] 29 31 30 31 30 31 30 33 33 29
## 
## 
## $address
## $address$stats
## [1]  0  3  7 12 25
## 
## $address$n
## [1] 850
## 
## $address$conf
## [1] 6.512258 7.487742
## 
## $address$out
##  [1] 26 27 27 26 29 26 26 26 31 26 34 27 31 26 27 26 26 26 30
## 
## 
## $income
## $income$stats
## [1]  13  24  35  56 102
## 
## $income$n
## [1] 850
## 
## $income$conf
## [1] 33.26581 36.73419
## 
## $income$out
##  [1] 176 120 113 121 135 116 116 145 113 118 144 105 120 159 129 120 220
## [18] 126 132 157 446 242 177 221 166 190 249 123 234 115 114 113 129 148
## [35] 186 136 113 253 150 107 108 139 324 169 126 254 266 140 126 138 110
## [52] 116 116
## 
## 
## $debtinc
## $debtinc$stats
## [1]  0.1  5.1  8.7 13.8 26.5
## 
## $debtinc$n
## [1] 850
## 
## $debtinc$conf
## [1] 8.228516 9.171484
## 
## $debtinc$out
##  [1] 30.6 27.7 35.3 27.1 41.3 30.8 29.7 30.1 28.9 33.3 28.5 27.7 36.6 33.4
## [15] 30.7 32.5 28.9 32.5 28.2 32.3 32.4
## 
## 
## $creddebt
## $creddebt$stats
## [1] 0.0116960 0.3816000 0.8850915 1.8988200 4.1600000
## 
## $creddebt$n
## [1] 850
## 
## $creddebt$conf
## [1] 0.802868 0.967315
## 
## $creddebt$out
##  [1] 11.359392  6.048900  7.758900  4.582400  9.876600  6.226794  4.637360
##  [8]  4.404816  9.600480  4.874716  4.373382 20.561310  9.593400  4.593402
## [15] 14.596200  5.001711  5.574294  8.166400  4.521696  6.565583  5.245296
## [22] 15.016680  6.113800  6.935916  5.439966  6.948680  7.817144  4.764760
## [29]  5.402000 16.031470  4.672800 15.791776  4.584030  6.111369  5.715360
## [36]  4.513860  4.272840  4.991010  5.549544  7.387380  5.090526  6.911520
## [43]  4.935645  5.283498  7.320000  4.960032  5.896743  6.588540  4.637556
## [50]  5.781564 14.231448  5.060000  4.334400  5.501188  9.308376  4.880700
## [57] 13.552500  5.250528  6.506240  7.053480  7.612542  7.001764 10.679340
## [64]  7.754240  4.212968  4.183900  5.821200  9.542358  9.702504
## 
## 
## $othdebt
## $othdebt$stats
## [1] 0.045584 1.045296 2.003243 3.915681 8.217600
## 
## $othdebt$n
## [1] 850
## 
## $othdebt$conf
## [1] 1.847687 2.158799
## 
## $othdebt$out
##  [1] 16.668126  9.736768  9.716100  8.399496  8.502006 13.051206 12.421860
##  [8] 14.452730 10.183560 10.753960 12.659328  8.362380 12.075690  9.498822
## [15] 17.203800 12.714006 27.033600  9.043830 14.719320  9.286200 15.405390
## [22]  9.390654 11.874450  8.631320  9.250856  9.198000 11.042325 12.958530
## [29]  9.555345 23.104224  9.974640 18.269130 20.615868  9.704240 11.663340
## [36] 15.149160 10.811388 18.257382 17.798990 10.630620 11.893518 10.980000
## [43]  8.600436 17.184552  9.591294  9.459450 11.723976  8.907624 35.197500
## [50]  9.008766  9.018324 15.626520  9.727536  9.649458 12.556236  9.060660
## [57]  8.386560 15.276100 10.385496
## 
## 
## $default
## $default$stats
## [1] 0 0 0 1 1
## 
## $default$n
## [1] 700
## 
## $default$conf
## [1] -0.05971839  0.05971839
## 
## $default$out
## numeric(0)
sapply(loan_data, function(x){boxplot.stats(x)})
##       age       ed         employ     address    income     debtinc   
## stats Numeric,5 Numeric,5  Numeric,5  Numeric,5  Numeric,5  Numeric,5 
## n     850       850        850        850        850        850       
## conf  Numeric,2 Numeric,2  Numeric,2  Numeric,2  Numeric,2  Numeric,2 
## out   Integer,0 Integer,54 Integer,10 Integer,19 Integer,53 Numeric,21
##       creddebt   othdebt    default  
## stats Numeric,5  Numeric,5  Numeric,5
## n     850        850        700      
## conf  Numeric,2  Numeric,2  Numeric,2
## out   Numeric,69 Numeric,59 Integer,0




=====================================================================

OUTLIER TREATMENT
=====================================================================

#install.packages("outliers")
require(outliers)
## Loading required package: outliers
## 
## Attaching package: 'outliers'
## 
## The following object is masked from 'package:timeSeries':
## 
##     outlier
## 
## The following object is masked from 'package:psych':
## 
##     outlier
sapply(loan_data ,function(x)(outlier(x)))
##       age        ed    employ   address    income   debtinc  creddebt 
##  56.00000   5.00000  33.00000  34.00000 446.00000  41.30000  20.56131 
##   othdebt   default 
##  35.19750   1.00000
#n <- nrow(loan_data)
#pch <- rep(".", n)
#pch[outlier] <- "+"
#col <- rep("black", n)
#col[outliers] <- "red"
#pairs(loan_data$default~loan_data$age,pch=pch,col=col)

#install.packages("extremevalues")
require(extremevalues)
## Loading required package: extremevalues
getOutliers(loan_data$age, method = "I")
## $mu
## [1] 34.68824
## 
## $sigma
## [1] 8.810729
## 
## $nFit
## [1] 680
## 
## $R2
##           [,1]
## [1,] 0.9917261
## 
## $limit
##      Left     Right 
##  7.889182 61.487288 
## 
## $method
## [1] "Method I"
## 
## $distribution
## [1] "normal"
## 
## $iRight
## integer(0)
## 
## $iLeft
## integer(0)
## 
## $nOut
##  Left Right 
##     0     0 
## 
## $yMin
## [1] 25
## 
## $yMax
## [1] 47
## 
## $rho
##  Left Right 
##     1     1 
## 
## $Fmin
## [1] 0.1
## 
## $Fmax
## [1] 0.9
out <- apply(loan_data, 2,  function(x){getOutliers(x, method = "I")})
out
## $age
## $age$mu
## [1] 34.68824
## 
## $age$sigma
## [1] 8.810729
## 
## $age$nFit
## [1] 680
## 
## $age$R2
##           [,1]
## [1,] 0.9917261
## 
## $age$limit
##      Left     Right 
##  7.889182 61.487288 
## 
## $age$method
## [1] "Method I"
## 
## $age$distribution
## [1] "normal"
## 
## $age$iRight
## integer(0)
## 
## $age$iLeft
## integer(0)
## 
## $age$nOut
##  Left Right 
##     0     0 
## 
## $age$yMin
## [1] 25
## 
## $age$yMax
## [1] 47
## 
## $age$rho
##  Left Right 
##     1     1 
## 
## $age$Fmin
## [1] 0.1
## 
## $age$Fmax
## [1] 0.9
## 
## 
## $ed
## $ed$mu
## [1] 1.551471
## 
## $ed$sigma
## [1] 0.8877459
## 
## $ed$nFit
## [1] 680
## 
## $ed$R2
##           [,1]
## [1,] 0.7586652
## 
## $ed$limit
##      Left     Right 
## -1.148732  4.251673 
## 
## $ed$method
## [1] "Method I"
## 
## $ed$distribution
## [1] "normal"
## 
## $ed$iRight
## [1] 367 385 388 457 503
## 
## $ed$iLeft
## integer(0)
## 
## $ed$nOut
##  Left Right 
##     0     5 
## 
## $ed$yMin
## [1] 1
## 
## $ed$yMax
## [1] 3
## 
## $ed$rho
##  Left Right 
##     1     1 
## 
## $ed$Fmin
## [1] 0.1
## 
## $ed$Fmax
## [1] 0.9
## 
## 
## $employ
## $employ$mu
## [1] 7.889706
## 
## $employ$sigma
## [1] 7.072542
## 
## $employ$nFit
## [1] 680
## 
## $employ$R2
##           [,1]
## [1,] 0.9792786
## 
## $employ$limit
##      Left     Right 
## -13.62241  29.40182 
## 
## $employ$method
## [1] "Method I"
## 
## $employ$distribution
## [1] "normal"
## 
## $employ$iRight
## [1] 529 623 633 676 692 708 724 751
## 
## $employ$iLeft
## integer(0)
## 
## $employ$nOut
##  Left Right 
##     0     8 
## 
## $employ$yMin
## [1] 1
## 
## $employ$yMax
## [1] 18
## 
## $employ$rho
##  Left Right 
##     1     1 
## 
## $employ$Fmin
## [1] 0.1
## 
## $employ$Fmax
## [1] 0.9
## 
## 
## $address
## $address$mu
## [1] 7.560294
## 
## $address$sigma
## [1] 7.094702
## 
## $address$nFit
## [1] 680
## 
## $address$R2
##           [,1]
## [1,] 0.9685023
## 
## $address$limit
##      Left     Right 
## -14.01923  29.13982 
## 
## $address$method
## [1] "Method I"
## 
## $address$distribution
## [1] "normal"
## 
## $address$iRight
## [1] 490 570 642 843
## 
## $address$iLeft
## integer(0)
## 
## $address$nOut
##  Left Right 
##     0     4 
## 
## $address$yMin
## [1] 1
## 
## $address$yMax
## [1] 19
## 
## $address$rho
##  Left Right 
##     1     1 
## 
## $address$Fmin
## [1] 0.1
## 
## $address$Fmax
## [1] 0.9
## 
## 
## $income
## $income$mu
## [1] 39.425
## 
## $income$sigma
## [1] 24.10566
## 
## $income$nFit
## [1] 680
## 
## $income$R2
##           [,1]
## [1,] 0.9180255
## 
## $income$limit
##      Left     Right 
## -33.89571 112.74571 
## 
## $income$method
## [1] "Method I"
## 
## $income$distribution
## [1] "normal"
## 
## $income$iRight
##  [1]   1   4 101 104 143 206 211 218 223 244 251 271 293 301 326 344 388
## [18] 411 438 445 451 457 467 479 503 529 548 558 563 570 606 614 623 626
## [35] 633 667 692 708 724 751 775 785 795 807 823 832 833 839 847
## 
## $income$iLeft
## integer(0)
## 
## $income$nOut
##  Left Right 
##     0    49 
## 
## $income$yMin
## [1] 19
## 
## $income$yMax
## [1] 84
## 
## $income$rho
##  Left Right 
##     1     1 
## 
## $income$Fmin
## [1] 0.1
## 
## $income$Fmax
## [1] 0.9
## 
## 
## $debtinc
## $debtinc$mu
## [1] 9.409118
## 
## $debtinc$sigma
## [1] 6.407929
## 
## $debtinc$nFit
## [1] 680
## 
## $debtinc$R2
##           [,1]
## [1,] 0.9756977
## 
## $debtinc$limit
##      Left     Right 
## -10.08149  28.89972 
## 
## $debtinc$method
## [1] "Method I"
## 
## $debtinc$distribution
## [1] "normal"
## 
## $debtinc$iRight
##  [1]   7 123 374 382 404 420 444 493 584 585 638 655 693 708 808 841
## 
## $debtinc$iLeft
## integer(0)
## 
## $debtinc$nOut
##  Left Right 
##     0    16 
## 
## $debtinc$yMin
## [1] 2.9
## 
## $debtinc$yMax
## [1] 19.2
## 
## $debtinc$rho
##  Left Right 
##     1     1 
## 
## $debtinc$Fmin
## [1] 0.1
## 
## $debtinc$Fmax
## [1] 0.9
## 
## 
## $creddebt
## $creddebt$mu
## [1] 1.137728
## 
## $creddebt$sigma
## [1] 1.193638
## 
## $creddebt$nFit
## [1] 680
## 
## $creddebt$R2
##         [,1]
## [1,] 0.89969
## 
## $creddebt$limit
##      Left     Right 
## -2.492888  4.768345 
## 
## $creddebt$method
## [1] "Method I"
## 
## $creddebt$distribution
## [1] "normal"
## 
## $creddebt$iRight
##  [1]   1  36  66 105 166 244 250 301 311 326 335 339 344 355 369 374 382
## [18] 394 419 430 431 441 445 467 488 494 550 553 558 560 565 566 575 584
## [35] 591 600 602 632 633 636 665 692 703 708 715 717 751 785 795 804 811
## [52] 834 837 841
## 
## $creddebt$iLeft
## integer(0)
## 
## $creddebt$nOut
##  Left Right 
##     0    54 
## 
## $creddebt$yMin
## [1] 0.178704
## 
## $creddebt$yMax
## [1] 3.70326
## 
## $creddebt$rho
##  Left Right 
##     1     1 
## 
## $creddebt$Fmin
## [1] 0.1
## 
## $creddebt$Fmax
## [1] 0.9
## 
## 
## $othdebt
## $othdebt$mu
## [1] 2.420174
## 
## $othdebt$sigma
## [1] 2.201232
## 
## $othdebt$nFit
## [1] 680
## 
## $othdebt$R2
##           [,1]
## [1,] 0.9071304
## 
## $othdebt$limit
##      Left     Right 
## -4.275179  9.115527 
## 
## $othdebt$method
## [1] "Method I"
## 
## $othdebt$distribution
## [1] "normal"
## 
## $othdebt$iRight
##  [1]   7  28  66 166 211 218 223 224 251 301 308 326 327 344 374 382 404
## [18] 412 420 431 441 443 445 457 467 469 479 492 498 503 529 543 548 550
## [35] 558 573 584 633 638 655 667 708 751 752 785 795 823 841
## 
## $othdebt$iLeft
## integer(0)
## 
## $othdebt$nOut
##  Left Right 
##     0    48 
## 
## $othdebt$yMin
## [1] 0.552069
## 
## $othdebt$yMax
## [1] 7.10685
## 
## $othdebt$rho
##  Left Right 
##     1     1 
## 
## $othdebt$Fmin
## [1] 0.1
## 
## $othdebt$Fmax
## [1] 0.9
## 
## 
## $default
## $default$mu
## [1] 0.2017857
## 
## $default$sigma
## [1] 0.4285565
## 
## $default$nFit
## [1] 560
## 
## $default$R2
##           [,1]
## [1,] 0.4971636
## 
## $default$limit
##      Left     Right 
## -1.076472  1.480043 
## 
## $default$method
## [1] "Method I"
## 
## $default$distribution
## [1] "normal"
## 
## $default$iRight
## integer(0)
## 
## $default$iLeft
## integer(0)
## 
## $default$nOut
##  Left Right 
##     0     0 
## 
## $default$yMin
## [1] 0
## 
## $default$yMax
## [1] 1
## 
## $default$rho
##  Left Right 
##     1     1 
## 
## $default$Fmin
## [1] 0.1
## 
## $default$Fmax
## [1] 0.9
my_box <- boxplot(loan_data)


#my_box$out


#Using user defined function
detect_outlier <- function(x)
{
  m <- mean(x)
  sd <- sd(x)
  min <- min(x)
  max <- max(x)
  p1 <- quantile(x, 0.01, na.rm=T)
  p99 <- quantile(x, 0.99, na.rm=T)
  q1<-quantile(x,0.25,na.rm=T)
  q3<-quantile(x,0.75,na.rm=T)
  
  LC1 <- m - 3 * sd
  UC1 <- m + 3 * sd
  OUT1 <- max > UC1 | min < LC1
  
  LC2 <- p1
  UC2 <- p99
  OUT2 <- max > UC2 | min < LC2
  
  iqr <- IQR(x, na.rm = TRUE)
  LC3 <- q1 - 1.5 * iqr
  UC3 <- q3 + 1.5 * iqr
  OUT3 <- max > UC3 | min < LC3
  
  return(c(outlieMethod1=OUT1, outlieMethod2=OUT2, outlieMethod3=OUT3))
}

outs <- apply(loan_data, 2, function(x){detect_outlier(x)})
t(outs)
##          outlieMethod1 outlieMethod2.99% outlieMethod3.75%
## age              FALSE              TRUE             FALSE
## ed                TRUE              TRUE              TRUE
## employ            TRUE              TRUE              TRUE
## address           TRUE              TRUE              TRUE
## income            TRUE              TRUE              TRUE
## debtinc           TRUE              TRUE              TRUE
## creddebt          TRUE              TRUE              TRUE
## othdebt           TRUE              TRUE              TRUE
## default             NA                NA                NA
Outlier_Method_IQR <- function(x)
{
  quantiles <- quantile(x, c(0.1,0.99), na.rm = TRUE)
  x[ x < quantiles[1] ] <- quantiles[1]
  x[ x > quantiles[2] ] <- quantiles[2]
  x
}

Outlier_Method_mean <- function(x)
{
  m <- mean(x)
  sd <- sd(x)
  LC1 <- m - 3 * sd
  UC1 <- m + 3 * sd
  x[ x > UC ] <- UC
  x[ x < LC ] <- LC
}

Outlier_Method_percentile <- function(x)
{
  p1 <- quantile(x, 0.01, na.rm=T)
  p99 <- quantile(x, 0.99, na.rm=T)
  LC <- p1
  UC <- p99
  x[ x > UC ] <- UC
  x[ x < LC ] <- LC
}


mybox1 <- boxplot(loan_data$age, plot = FALSE)
#mybox1$out



===================================================================

MISSING VALUES
===================================================================

#checking for missing values
sapply(loan_data, function(x){sum(is.na(x))})
##      age       ed   employ  address   income  debtinc creddebt  othdebt 
##        0        0        0        0        0        0        0        0 
##  default 
##      150
#Missing using Amelia package
#install.packages("Amelia")
require(Amelia)
## Loading required package: Amelia
## Loading required package: Rcpp
## ## 
## ## Amelia II: Multiple Imputation
## ## (Version 1.7.3, built: 2014-11-14)
## ## Copyright (C) 2005-2015 James Honaker, Gary King and Matthew Blackwell
## ## Refer to http://gking.harvard.edu/amelia/ for more information
## ##
missmap(loan_data, main = "Missing values vs observed")


===================================================================

Splitting the data set into Training & Testing
===================================================================

#creating two data sets of existing customers and new customers
exist_cust <- loan_data[ ! is.na(loan_data$default), ]
new_cust <- loan_data[ is.na(loan_data$default), ]

#set.seed(217)
#train_ind <- sample(1:nrow(exist_cust), size = floor(0.70 * #nrow(exist_cust)))
#training <- exist_cust[ train_ind,]
#testing <- exist_cust[-train_ind,]
#nrow(training)
#nrow(testing)
#head(training)
#require(psych)
#headTail(testing)


#require(caret)
#index <- createDataPartition(exist_cust$default, p = 0.7,
#                             list = FALSE,
#                             times = 1)
#train.data <- exist_cust[index,]
#test.data <- exist_cust[-index,]
#dim(train.data)
#dim(test.data)

train_ind <- sample(1:nrow(exist_cust), size = floor(0.75 * nrow(exist_cust)))
train.data <- exist_cust[ train_ind,]
test.data <- exist_cust[-train_ind,]
dim(train.data)
## [1] 525   9
dim(test.data)
## [1] 175   9



===================================================================

BUILDING MODEL FOR TRAINING DATA SET
===================================================================

names(train.data)
## [1] "age"      "ed"       "employ"   "address"  "income"   "debtinc" 
## [7] "creddebt" "othdebt"  "default"
model1 <- glm(default~age+ed+employ+address+income+debtinc+creddebt+othdebt, data = train.data, family = binomial(logit))

summary(model1)
## 
## Call:
## glm(formula = default ~ age + ed + employ + address + income + 
##     debtinc + creddebt + othdebt, family = binomial(logit), data = train.data)
## 
## Deviance Residuals: 
##     Min       1Q   Median       3Q      Max  
## -2.5768  -0.6398  -0.2500   0.4221   2.6906  
## 
## Coefficients:
##              Estimate Std. Error z value Pr(>|z|)    
## (Intercept) -1.320979   0.728457  -1.813 0.069771 .  
## age          0.027089   0.020447   1.325 0.185210    
## ed           0.114603   0.146276   0.783 0.433353    
## employ      -0.285258   0.040362  -7.068 1.58e-12 ***
## address     -0.101283   0.027022  -3.748 0.000178 ***
## income      -0.011458   0.008495  -1.349 0.177415    
## debtinc      0.077606   0.035424   2.191 0.028467 *  
## creddebt     0.703761   0.132882   5.296 1.18e-07 ***
## othdebt      0.058740   0.092511   0.635 0.525459    
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## (Dispersion parameter for binomial family taken to be 1)
## 
##     Null deviance: 616.85  on 524  degrees of freedom
## Residual deviance: 400.75  on 516  degrees of freedom
## AIC: 418.75
## 
## Number of Fisher Scoring iterations: 6


require(caret)
## Loading required package: caret
## 
## Attaching package: 'caret'
## 
## The following object is masked from 'package:survival':
## 
##     cluster


varImp(model1)
##            Overall
## age      1.3248821
## ed       0.7834672
## employ   7.0675623
## address  3.7481424
## income   1.3487561
## debtinc  2.1907879
## creddebt 5.2961291
## othdebt  0.6349538


anova(model1, test = "Chisq")
## Analysis of Deviance Table
## 
## Model: binomial, link: logit
## 
## Response: default
## 
## Terms added sequentially (first to last)
## 
## 
##          Df Deviance Resid. Df Resid. Dev  Pr(>Chi)    
## NULL                       524     616.85              
## age       1   14.237       523     602.61 0.0001612 ***
## ed        1    5.434       522     597.18 0.0197430 *  
## employ    1   35.284       521     561.89 2.850e-09 ***
## address   1    7.291       520     554.60 0.0069293 ** 
## income    1    7.840       519     546.76 0.0051110 ** 
## debtinc   1  100.765       518     446.00 < 2.2e-16 ***
## creddebt  1   44.849       517     401.15 2.128e-11 ***
## othdebt   1    0.400       516     400.75 0.5268426    
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
confint(model1)
## Waiting for profiling to be done...
##                    2.5 %       97.5 %
## (Intercept) -2.756226689  0.107443379
## age         -0.013311828  0.067151778
## ed          -0.174942068  0.400151898
## employ      -0.368283859 -0.209786307
## address     -0.155628531 -0.049372596
## income      -0.027991324  0.006667252
## debtinc      0.008235626  0.147485488
## creddebt     0.461200633  0.982656991
## othdebt     -0.124984207  0.240113856


model2 <- glm(default~age+ed+employ+address+income+debtinc+creddebt, data = train.data, family = binomial(logit))
summary(model2)
## 
## Call:
## glm(formula = default ~ age + ed + employ + address + income + 
##     debtinc + creddebt, family = binomial(logit), data = train.data)
## 
## Deviance Residuals: 
##     Min       1Q   Median       3Q      Max  
## -2.5763  -0.6291  -0.2464   0.3935   2.6608  
## 
## Coefficients:
##              Estimate Std. Error z value Pr(>|z|)    
## (Intercept) -1.495291   0.674055  -2.218 0.026531 *  
## age          0.026976   0.020462   1.318 0.187393    
## ed           0.126857   0.145148   0.874 0.382126    
## employ      -0.276230   0.037416  -7.383 1.55e-13 ***
## address     -0.100361   0.026949  -3.724 0.000196 ***
## income      -0.008249   0.007079  -1.165 0.243851    
## debtinc      0.094269   0.023698   3.978 6.95e-05 ***
## creddebt     0.678146   0.123665   5.484 4.16e-08 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## (Dispersion parameter for binomial family taken to be 1)
## 
##     Null deviance: 616.85  on 524  degrees of freedom
## Residual deviance: 401.15  on 517  degrees of freedom
## AIC: 417.15
## 
## Number of Fisher Scoring iterations: 6
varImp(model2)
##            Overall
## age      1.3183303
## ed       0.8739852
## employ   7.3827621
## address  3.7241652
## income   1.1654151
## debtinc  3.9779661
## creddebt 5.4837532


anova(model2, test = "Chisq")
## Analysis of Deviance Table
## 
## Model: binomial, link: logit
## 
## Response: default
## 
## Terms added sequentially (first to last)
## 
## 
##          Df Deviance Resid. Df Resid. Dev  Pr(>Chi)    
## NULL                       524     616.85              
## age       1   14.237       523     602.61 0.0001612 ***
## ed        1    5.434       522     597.18 0.0197430 *  
## employ    1   35.284       521     561.89 2.850e-09 ***
## address   1    7.291       520     554.60 0.0069293 ** 
## income    1    7.840       519     546.76 0.0051110 ** 
## debtinc   1  100.765       518     446.00 < 2.2e-16 ***
## creddebt  1   44.849       517     401.15 2.128e-11 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
require(car)
## Loading required package: car
## 
## Attaching package: 'car'
## 
## The following object is masked from 'package:boot':
## 
##     logit
## 
## The following object is masked from 'package:fBasics':
## 
##     densityPlot
## 
## The following object is masked from 'package:psych':
## 
##     logit
vif(model2)
##      age       ed   employ  address   income  debtinc creddebt 
## 1.717699 1.211819 2.357272 1.542774 3.155042 1.513600 3.950100


confint(model2)
## Waiting for profiling to be done...
##                   2.5 %       97.5 %
## (Intercept) -2.82614151 -0.175298183
## age         -0.01346194  0.067062657
## ed          -0.16094549  0.409970021
## employ      -0.35342966 -0.206247756
## address     -0.15453935 -0.048575941
## income      -0.02166719  0.006499734
## debtinc      0.04828769  0.141474079
## creddebt     0.44987411  0.935382282



model3 <- glm(default~age+employ+address+income+debtinc+creddebt, data = train.data, family = binomial(logit))
summary(model3)
## 
## Call:
## glm(formula = default ~ age + employ + address + income + debtinc + 
##     creddebt, family = binomial(logit), data = train.data)
## 
## Deviance Residuals: 
##     Min       1Q   Median       3Q      Max  
## -2.5672  -0.6359  -0.2453   0.3776   2.6408  
## 
## Coefficients:
##              Estimate Std. Error z value Pr(>|z|)    
## (Intercept) -1.287716   0.630510  -2.042 0.041118 *  
## age          0.026102   0.020466   1.275 0.202160    
## employ      -0.283617   0.036740  -7.720 1.17e-14 ***
## address     -0.098562   0.026867  -3.669 0.000244 ***
## income      -0.006151   0.006985  -0.881 0.378476    
## debtinc      0.094659   0.023669   3.999 6.35e-05 ***
## creddebt     0.673500   0.123933   5.434 5.50e-08 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## (Dispersion parameter for binomial family taken to be 1)
## 
##     Null deviance: 616.85  on 524  degrees of freedom
## Residual deviance: 401.91  on 518  degrees of freedom
## AIC: 415.91
## 
## Number of Fisher Scoring iterations: 6


varImp(model3)
##            Overall
## age      1.2754224
## employ   7.7196507
## address  3.6685442
## income   0.8807072
## debtinc  3.9993143
## creddebt 5.4343959
anova(model3, test = "Chisq")
## Analysis of Deviance Table
## 
## Model: binomial, link: logit
## 
## Response: default
## 
## Terms added sequentially (first to last)
## 
## 
##          Df Deviance Resid. Df Resid. Dev  Pr(>Chi)    
## NULL                       524     616.85              
## age       1   14.237       523     602.61 0.0001612 ***
## employ    1   38.804       522     563.81 4.685e-10 ***
## address   1    6.760       521     557.05 0.0093242 ** 
## income    1   10.233       520     546.82 0.0013798 ** 
## debtinc   1  100.744       519     446.07 < 2.2e-16 ***
## creddebt  1   44.165       518     401.91 3.019e-11 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1


vif(model3)
##      age   employ  address   income  debtinc creddebt 
## 1.713926 2.268521 1.533949 2.768493 1.517995 3.839074


model4 <- glm(default~age+employ+address+debtinc+creddebt, data = train.data, family = binomial(logit))
summary(model4)
## 
## Call:
## glm(formula = default ~ age + employ + address + debtinc + creddebt, 
##     family = binomial(logit), data = train.data)
## 
## Deviance Residuals: 
##     Min       1Q   Median       3Q      Max  
## -2.5301  -0.6346  -0.2506   0.3752   2.6765  
## 
## Coefficients:
##             Estimate Std. Error z value Pr(>|z|)    
## (Intercept) -1.40905    0.61451  -2.293  0.02185 *  
## age          0.02430    0.02034   1.195  0.23211    
## employ      -0.28989    0.03633  -7.980 1.47e-15 ***
## address     -0.10044    0.02671  -3.760  0.00017 ***
## debtinc      0.10280    0.02178   4.720 2.35e-06 ***
## creddebt     0.61266    0.09946   6.160 7.29e-10 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## (Dispersion parameter for binomial family taken to be 1)
## 
##     Null deviance: 616.85  on 524  degrees of freedom
## Residual deviance: 402.65  on 519  degrees of freedom
## AIC: 414.65
## 
## Number of Fisher Scoring iterations: 6


varImp(model4)
##           Overall
## age      1.194941
## employ   7.979696
## address  3.759753
## debtinc  4.720451
## creddebt 6.159568


vif(model4)
##      age   employ  address  debtinc creddebt 
## 1.700642 2.246563 1.526901 1.295322 2.409879


model5 <- glm(default~income+address+debtinc+creddebt, data = train.data, family = binomial(logit))
summary(model5)
## 
## Call:
## glm(formula = default ~ income + address + debtinc + creddebt, 
##     family = binomial(logit), data = train.data)
## 
## Deviance Residuals: 
##     Min       1Q   Median       3Q      Max  
## -2.1166  -0.7256  -0.4840   0.5903   3.2811  
## 
## Coefficients:
##              Estimate Std. Error z value Pr(>|z|)    
## (Intercept) -1.082297   0.336951  -3.212 0.001318 ** 
## income      -0.024390   0.007335  -3.325 0.000883 ***
## address     -0.075966   0.020041  -3.790 0.000150 ***
## debtinc      0.082993   0.020920   3.967 7.27e-05 ***
## creddebt     0.443271   0.105947   4.184 2.87e-05 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## (Dispersion parameter for binomial family taken to be 1)
## 
##     Null deviance: 616.85  on 524  degrees of freedom
## Residual deviance: 492.15  on 520  degrees of freedom
## AIC: 502.15
## 
## Number of Fisher Scoring iterations: 5


varImp(model5)
##           Overall
## income   3.325316
## address  3.790489
## debtinc  3.967108
## creddebt 4.183898


vif(model5)
##   income  address  debtinc creddebt 
## 2.702765 1.140101 1.465919 3.259411


model6 <- glm(default~age+employ+address+debtinc+creddebt, data = train.data, family = binomial(logit))
summary(model6)
## 
## Call:
## glm(formula = default ~ age + employ + address + debtinc + creddebt, 
##     family = binomial(logit), data = train.data)
## 
## Deviance Residuals: 
##     Min       1Q   Median       3Q      Max  
## -2.5301  -0.6346  -0.2506   0.3752   2.6765  
## 
## Coefficients:
##             Estimate Std. Error z value Pr(>|z|)    
## (Intercept) -1.40905    0.61451  -2.293  0.02185 *  
## age          0.02430    0.02034   1.195  0.23211    
## employ      -0.28989    0.03633  -7.980 1.47e-15 ***
## address     -0.10044    0.02671  -3.760  0.00017 ***
## debtinc      0.10280    0.02178   4.720 2.35e-06 ***
## creddebt     0.61266    0.09946   6.160 7.29e-10 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## (Dispersion parameter for binomial family taken to be 1)
## 
##     Null deviance: 616.85  on 524  degrees of freedom
## Residual deviance: 402.65  on 519  degrees of freedom
## AIC: 414.65
## 
## Number of Fisher Scoring iterations: 6


varImp(model6)
##           Overall
## age      1.194941
## employ   7.979696
## address  3.759753
## debtinc  4.720451
## creddebt 6.159568


vif(model6)
##      age   employ  address  debtinc creddebt 
## 1.700642 2.246563 1.526901 1.295322 2.409879


confint(model6)
## Waiting for profiling to be done...
##                   2.5 %      97.5 %
## (Intercept) -2.62239947 -0.20681675
## age         -0.01591894  0.06410359
## employ      -0.36478943 -0.22207536
## address     -0.15418395 -0.04915958
## debtinc      0.06069127  0.14630017
## creddebt     0.43130264  0.82073124
#model 6 is final model

Concordance(model6)
## $concordance
## [1] 0.9097222
## 
## $num_concordant
## [1] 131
## 
## $discordance
## [1] 0.09027778
## 
## $num_discordant
## [1] 13
## 
## $tie_rate
## [1] 0
## 
## $num_tied
## [1] 0
## 
## $Somers_D
## [1] 0.8194444
## 
## $gamma
## [1] 0.8194444



step1 <- step(model1)
## Start:  AIC=418.75
## default ~ age + ed + employ + address + income + debtinc + creddebt + 
##     othdebt
## 
##            Df Deviance    AIC
## - othdebt   1   401.15 417.15
## - ed        1   401.36 417.36
## - income    1   402.38 418.38
## - age       1   402.49 418.49
## <none>          400.75 418.75
## - debtinc   1   405.56 421.56
## - address   1   415.77 431.77
## - creddebt  1   445.14 461.14
## - employ    1   472.35 488.35
## 
## Step:  AIC=417.15
## default ~ age + ed + employ + address + income + debtinc + creddebt
## 
##            Df Deviance    AIC
## - ed        1   401.91 415.91
## - income    1   402.40 416.40
## - age       1   402.87 416.87
## <none>          401.15 417.15
## - address   1   415.96 429.96
## - debtinc   1   417.43 431.43
## - creddebt  1   446.00 460.00
## - employ    1   476.10 490.10
## 
## Step:  AIC=415.91
## default ~ age + employ + address + income + debtinc + creddebt
## 
##            Df Deviance    AIC
## - income    1   402.65 414.65
## - age       1   403.52 415.52
## <none>          401.91 415.91
## - address   1   416.27 428.27
## - debtinc   1   418.41 430.41
## - creddebt  1   446.07 458.07
## - employ    1   489.12 501.12
## 
## Step:  AIC=414.65
## default ~ age + employ + address + debtinc + creddebt
## 
##            Df Deviance    AIC
## - age       1   404.07 414.07
## <none>          402.65 414.65
## - address   1   417.83 427.83
## - debtinc   1   425.98 435.98
## - creddebt  1   463.40 473.40
## - employ    1   500.21 510.21
## 
## Step:  AIC=414.07
## default ~ employ + address + debtinc + creddebt
## 
##            Df Deviance    AIC
## <none>          404.07 414.07
## - address   1   419.19 427.19
## - debtinc   1   426.76 434.76
## - creddebt  1   465.35 473.35
## - employ    1   507.68 515.68
summary(step1)
## 
## Call:
## glm(formula = default ~ employ + address + debtinc + creddebt, 
##     family = binomial(logit), data = train.data)
## 
## Deviance Residuals: 
##     Min       1Q   Median       3Q      Max  
## -2.5996  -0.6257  -0.2523   0.3874   2.6702  
## 
## Coefficients:
##             Estimate Std. Error z value Pr(>|z|)    
## (Intercept) -0.76550    0.28969  -2.643 0.008229 ** 
## employ      -0.27724    0.03435  -8.070 7.05e-16 ***
## address     -0.08386    0.02266  -3.701 0.000215 ***
## debtinc      0.10131    0.02176   4.656 3.22e-06 ***
## creddebt     0.61602    0.09976   6.175 6.62e-10 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## (Dispersion parameter for binomial family taken to be 1)
## 
##     Null deviance: 616.85  on 524  degrees of freedom
## Residual deviance: 404.07  on 520  degrees of freedom
## AIC: 414.07
## 
## Number of Fisher Scoring iterations: 6
varImp(step1)
##           Overall
## employ   8.069720
## address  3.700882
## debtinc  4.656371
## creddebt 6.174958
#checking overall effect of variable using wald.test
#install.packages("aod")
require(aod)
## Loading required package: aod
## 
## Attaching package: 'aod'
## 
## The following object is masked from 'package:survival':
## 
##     rats


wald.test(vcov(model3), coef(model3), Terms = 2)
## Wald test:
## ----------
## 
## Chi-squared test:
## X2 = 1.6, df = 1, P(> X2) = 0.2


#install.packages("pscl")
require(pscl)
## Loading required package: pscl
## Loading required package: MASS
## Classes and Methods for R developed in the
## 
## Political Science Computational Laboratory
## 
## Department of Political Science
## 
## Stanford University
## 
## Simon Jackman
## 
## hurdle and zeroinfl functions by Achim Zeileis



pR2(model6)
##          llh      llhNull           G2     McFadden         r2ML 
## -201.3258313 -308.4244108  214.1971590    0.3472442    0.3350175 
##         r2CU 
##    0.4847138



durbinWatsonTest(model6)
##  lag Autocorrelation D-W Statistic p-value
##    1     -0.04737693      2.089106   0.338
##  Alternative hypothesis: rho != 0



===================================================================

VALIDATING THE MODEL
===================================================================
####VALIDATION METHOD 1

model_test <- glm(default~age+employ+address+debtinc+creddebt, data = test.data, family = binomial(logit))
summary(model_test)
## 
## Call:
## glm(formula = default ~ age + employ + address + debtinc + creddebt, 
##     family = binomial(logit), data = test.data)
## 
## Deviance Residuals: 
##     Min       1Q   Median       3Q      Max  
## -1.4353  -0.6744  -0.3992  -0.1150   2.6988  
## 
## Coefficients:
##             Estimate Std. Error z value Pr(>|z|)    
## (Intercept) -2.26057    0.95283  -2.372  0.01767 *  
## age          0.05330    0.03391   1.572  0.11595    
## employ      -0.19480    0.05862  -3.323  0.00089 ***
## address     -0.11061    0.04881  -2.266  0.02345 *  
## debtinc      0.05872    0.03850   1.525  0.12718    
## creddebt     0.49819    0.20678   2.409  0.01599 *  
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## (Dispersion parameter for binomial family taken to be 1)
## 
##     Null deviance: 185.68  on 174  degrees of freedom
## Residual deviance: 144.49  on 169  degrees of freedom
## AIC: 156.49
## 
## Number of Fisher Scoring iterations: 5


varImp(model_test)
##           Overall
## age      1.572023
## employ   3.323262
## address  2.266063
## debtinc  1.525317
## creddebt 2.409224


Concordance(model_test)
## $concordance
## [1] 0.8974359
## 
## $num_concordant
## [1] 35
## 
## $discordance
## [1] 0.1025641
## 
## $num_discordant
## [1] 4
## 
## $tie_rate
## [1] 0
## 
## $num_tied
## [1] 0
## 
## $Somers_D
## [1] 0.7948718
## 
## $gamma
## [1] 0.7948718



Concordance(model6)
## $concordance
## [1] 0.9097222
## 
## $num_concordant
## [1] 131
## 
## $discordance
## [1] 0.09027778
## 
## $num_discordant
## [1] 13
## 
## $tie_rate
## [1] 0
## 
## $num_tied
## [1] 0
## 
## $Somers_D
## [1] 0.8194444
## 
## $gamma
## [1] 0.8194444






VALIDATION METHOD 2

#validation on training data
train_data <- cbind(train.data, Prob = predict(model6, type = "response"))
View(train_data)

#creating deciles
deciles <- quantile(train_data$Prob, seq(0.1, 0.9, by = 0.1))
deciles
##         10%         20%         30%         40%         50%         60% 
## 0.005910616 0.025235034 0.053241549 0.112830366 0.181112714 0.263260537 
##         70%         80%         90% 
## 0.388988201 0.519141684 0.740657036
train_data$decile <- findInterval(train_data$Prob, c(-Inf,deciles,Inf))

require(dplyr)
## Loading required package: dplyr
## 
## Attaching package: 'dplyr'
## 
## The following object is masked from 'package:MASS':
## 
##     select
## 
## The following objects are masked from 'package:pastecs':
## 
##     first, last
## 
## The following objects are masked from 'package:Hmisc':
## 
##     combine, src, summarize
## 
## The following objects are masked from 'package:timeSeries':
## 
##     filter, lag
## 
## The following objects are masked from 'package:stats':
## 
##     filter, lag
## 
## The following objects are masked from 'package:base':
## 
##     intersect, setdiff, setequal, union
train_data$decile <- factor(train_data$decile)
group <- group_by(train_data, decile)
summ_train_data <- summarise(group, total_cnt=n(), min_prob=min(p=Prob), max_prob=max(Prob), default_cnt=sum(default), 
           non_default_cnt=total_cnt -default_cnt )

summ_train_data<-arrange(summ_train_data, desc(decile))
summ_train_data <- arrange(summ_train_data, desc(decile))
summ_train_data
## Source: local data frame [10 x 6]
## 
##    decile total_cnt     min_prob    max_prob default_cnt non_default_cnt
##    (fctr)     (int)        (dbl)       (dbl)       (int)           (int)
## 1      10        53 0.7431582420 0.991130808          45               8
## 2       9        52 0.5211670859 0.736905226          31              21
## 3       8        53 0.3892589460 0.518635333          25              28
## 4       7        52 0.2638998511 0.387905219          19              33
## 5       6        53 0.1811127144 0.262834327           9              44
## 6       5        52 0.1140219892 0.179421895           6              46
## 7       4        52 0.0533668743 0.111042931           5              47
## 8       3        53 0.0253673256 0.053210218           4              49
## 9       2        52 0.0060195348 0.024705865           0              52
## 10      1        53 0.0002201687 0.005838004           0              53
write.csv(summ_train_data, "decile_train_summ.csv", row.names = F)

#validation on testing data
test_data <- cbind(test.data, Prob = predict(model6, test.data, type = "response"))
View(test_data)

#creating deciles
decile_test <- quantile(test_data$Prob, seq(0.1, 0.9, by = 0.1))
decile_test
##         10%         20%         30%         40%         50%         60% 
## 0.008013885 0.020814741 0.050779051 0.087391000 0.155694081 0.205618090 
##         70%         80%         90% 
## 0.299984287 0.475729598 0.633104460
test_data$decile <- findInterval(test_data$Prob, c(-Inf,decile_test,Inf))

test_data$decile <- factor(test_data$decile)
test_group <- group_by(test_data, decile)
summ_test_data <- summarise(test_group, total_cnt=n(), min_prob=min(p=Prob), max_prob=max(Prob), default_cnt=sum(default), 
           non_default_cnt=total_cnt -default_cnt )
summ_test_data <- arrange(summ_test_data, desc(decile))
summ_test_data
## Source: local data frame [10 x 6]
## 
##    decile total_cnt     min_prob    max_prob default_cnt non_default_cnt
##    (fctr)     (int)        (dbl)       (dbl)       (int)           (int)
## 1      10        18 0.6426208954 0.999656769          12               6
## 2       9        17 0.4948296040 0.618829806           6              11
## 3       8        18 0.3016604040 0.470954596           6              12
## 4       7        17 0.2062809097 0.293279819           5              12
## 5       6        18 0.1556940813 0.205176210           5              13
## 6       5        17 0.0887742424 0.154087290           1              16
## 7       4        17 0.0508209038 0.085316137           1              16
## 8       3        18 0.0210743306 0.050768588           2              16
## 9       2        17 0.0091894445 0.019776385           1              16
## 10      1        18 0.0003529135 0.007230179           0              18
write.csv(summ_test_data, "decile_test_summ.csv", row.names = F)



Confusion matrix

table(train_data$Prob > 0.23, train_data$default)
##        
##           0   1
##   FALSE 275  21
##   TRUE  106 123



table(test_data$Prob > 0.14, test_data$default)
##        
##          0  1
##   FALSE 80  5
##   TRUE  56 34



require(caret)
xtabs(Prob~default, data = train_data)
## default
##        0        1 
## 64.91528 79.08472


testpred <- predict(model6, train_data)
postResample(testpred, train_data$Prob)
##      RMSE  Rsquared 
## 2.9329801 0.8011266


confusionMatrix(train_data$default, sample(train_data$default))
## Confusion Matrix and Statistics
## 
##           Reference
## Prediction   0   1
##          0 264 117
##          1 117  27
##                                           
##                Accuracy : 0.5543          
##                  95% CI : (0.5106, 0.5973)
##     No Information Rate : 0.7257          
##     P-Value [Acc > NIR] : 1               
##                                           
##                   Kappa : -0.1196         
##  Mcnemar's Test P-Value : 1               
##                                           
##             Sensitivity : 0.6929          
##             Specificity : 0.1875          
##          Pos Pred Value : 0.6929          
##          Neg Pred Value : 0.1875          
##              Prevalence : 0.7257          
##          Detection Rate : 0.5029          
##    Detection Prevalence : 0.7257          
##       Balanced Accuracy : 0.4402          
##                                           
##        'Positive' Class : 0               
## 






precicting for new customers

new_cust1 <- cbind(new_cust, Prob = predict(model6, new_cust, type = "response"))
head(new_cust1)
##     age ed employ address income debtinc creddebt  othdebt default
## 701  36  1     16      13     32    10.9 0.544128 2.943872      NA
## 702  50  1      6      27     21    12.9 1.316574 1.392426      NA
## 703  40  1      9       9     33    17.0 4.880700 0.729300      NA
## 704  31  1      5       7     23     2.0 0.046000 0.414000      NA
## 705  29  1      4       0     24     7.8 0.866736 1.005264      NA
## 706  25  2      1       3     14     9.9 0.232848 1.153152      NA
##           Prob
## 701 0.00653327
## 702 0.07499219
## 703 0.68737434
## 704 0.07080001
## 705 0.37028255
## 706 0.44218238
new_cust1$default <- ifelse(new_cust1$Prob > 0.23, 1, 0)
View(new_cust1)
headTail(new_cust1)
##     age  ed employ address income debtinc creddebt othdebt default Prob
## 701  36   1     16      13     32    10.9     0.54    2.94       0 0.01
## 702  50   1      6      27     21    12.9     1.32    1.39       0 0.07
## 703  40   1      9       9     33      17     4.88    0.73       1 0.69
## 704  31   1      5       7     23       2     0.05    0.41       0 0.07
## ... ... ...    ...     ...    ...     ...      ...     ...     ...  ...
## 847  32   2     12      11    116     5.7     4.03    2.59       0  0.1
## 848  48   1     13      11     38    10.8     0.72    3.38       0 0.03
## 849  35   2      1      11     24     7.8     0.42    1.45       1 0.29
## 850  37   1     20      13     41    12.9      0.9    4.39       0    0
sum(new_cust1$default)
## [1] 59
